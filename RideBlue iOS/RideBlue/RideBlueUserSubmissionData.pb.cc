// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RideBlueUserSubmissionData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RideBlueUserSubmissionData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SubmissionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmissionData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RideBlueUserSubmissionData_2eproto() {
  protobuf_AddDesc_RideBlueUserSubmissionData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RideBlueUserSubmissionData.proto");
  GOOGLE_CHECK(file != NULL);
  SubmissionData_descriptor_ = file->message_type(0);
  static const int SubmissionData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, locationfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, locationto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, umid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, phonenumer_),
  };
  SubmissionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmissionData_descriptor_,
      SubmissionData::default_instance_,
      SubmissionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmissionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmissionData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RideBlueUserSubmissionData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmissionData_descriptor_, &SubmissionData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RideBlueUserSubmissionData_2eproto() {
  delete SubmissionData::default_instance_;
  delete SubmissionData_reflection_;
}

void protobuf_AddDesc_RideBlueUserSubmissionData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n RideBlueUserSubmissionData.proto\"\274\001\n\016S"
    "ubmissionData\022\021\n\tfirstName\030\001 \002(\t\022\020\n\010last"
    "Name\030\002 \002(\t\022\024\n\014locationFrom\030\003 \002(\t\022\022\n\nloca"
    "tionTo\030\004 \002(\t\022\020\n\010deviceID\030\005 \002(\t\022\014\n\004UMID\030\006"
    " \002(\005\022\023\n\013requestType\030\007 \002(\005\022\020\n\010comments\030\010 "
    "\002(\t\022\024\n\nphoneNumer\030\t \001(\t:\000", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RideBlueUserSubmissionData.proto", &protobuf_RegisterTypes);
  SubmissionData::default_instance_ = new SubmissionData();
  SubmissionData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RideBlueUserSubmissionData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RideBlueUserSubmissionData_2eproto {
  StaticDescriptorInitializer_RideBlueUserSubmissionData_2eproto() {
    protobuf_AddDesc_RideBlueUserSubmissionData_2eproto();
  }
} static_descriptor_initializer_RideBlueUserSubmissionData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SubmissionData::kFirstNameFieldNumber;
const int SubmissionData::kLastNameFieldNumber;
const int SubmissionData::kLocationFromFieldNumber;
const int SubmissionData::kLocationToFieldNumber;
const int SubmissionData::kDeviceIDFieldNumber;
const int SubmissionData::kUMIDFieldNumber;
const int SubmissionData::kRequestTypeFieldNumber;
const int SubmissionData::kCommentsFieldNumber;
const int SubmissionData::kPhoneNumerFieldNumber;
#endif  // !_MSC_VER

SubmissionData::SubmissionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmissionData::InitAsDefaultInstance() {
}

SubmissionData::SubmissionData(const SubmissionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmissionData::SharedCtor() {
  _cached_size_ = 0;
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locationfrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locationto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  umid_ = 0;
  requesttype_ = 0;
  comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonenumer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmissionData::~SubmissionData() {
  SharedDtor();
}

void SubmissionData::SharedDtor() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (locationfrom_ != &::google::protobuf::internal::kEmptyString) {
    delete locationfrom_;
  }
  if (locationto_ != &::google::protobuf::internal::kEmptyString) {
    delete locationto_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (comments_ != &::google::protobuf::internal::kEmptyString) {
    delete comments_;
  }
  if (phonenumer_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenumer_;
  }
  if (this != default_instance_) {
  }
}

void SubmissionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmissionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmissionData_descriptor_;
}

const SubmissionData& SubmissionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RideBlueUserSubmissionData_2eproto();
  return *default_instance_;
}

SubmissionData* SubmissionData::default_instance_ = NULL;

SubmissionData* SubmissionData::New() const {
  return new SubmissionData;
}

void SubmissionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::kEmptyString) {
        firstname_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::kEmptyString) {
        lastname_->clear();
      }
    }
    if (has_locationfrom()) {
      if (locationfrom_ != &::google::protobuf::internal::kEmptyString) {
        locationfrom_->clear();
      }
    }
    if (has_locationto()) {
      if (locationto_ != &::google::protobuf::internal::kEmptyString) {
        locationto_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    umid_ = 0;
    requesttype_ = 0;
    if (has_comments()) {
      if (comments_ != &::google::protobuf::internal::kEmptyString) {
        comments_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_phonenumer()) {
      if (phonenumer_ != &::google::protobuf::internal::kEmptyString) {
        phonenumer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmissionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string firstName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lastName;
        break;
      }

      // required string lastName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_locationFrom;
        break;
      }

      // required string locationFrom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locationFrom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locationfrom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locationfrom().data(), this->locationfrom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_locationTo;
        break;
      }

      // required string locationTo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locationTo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locationto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locationto().data(), this->locationto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deviceID;
        break;
      }

      // required string deviceID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_UMID;
        break;
      }

      // required int32 UMID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &umid_)));
          set_has_umid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_requestType;
        break;
      }

      // required int32 requestType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_comments;
        break;
      }

      // required string comments = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comments().data(), this->comments().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_phoneNumer;
        break;
      }

      // optional string phoneNumer = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneNumer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phonenumer().data(), this->phonenumer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmissionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string firstName = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->firstname(), output);
  }

  // required string lastName = 2;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lastname(), output);
  }

  // required string locationFrom = 3;
  if (has_locationfrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationfrom().data(), this->locationfrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->locationfrom(), output);
  }

  // required string locationTo = 4;
  if (has_locationto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationto().data(), this->locationto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->locationto(), output);
  }

  // required string deviceID = 5;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->deviceid(), output);
  }

  // required int32 UMID = 6;
  if (has_umid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->umid(), output);
  }

  // required int32 requestType = 7;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->requesttype(), output);
  }

  // required string comments = 8;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->comments(), output);
  }

  // optional string phoneNumer = 9 [default = ""];
  if (has_phonenumer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenumer().data(), this->phonenumer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->phonenumer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmissionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string firstName = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstname(), target);
  }

  // required string lastName = 2;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastname(), target);
  }

  // required string locationFrom = 3;
  if (has_locationfrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationfrom().data(), this->locationfrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->locationfrom(), target);
  }

  // required string locationTo = 4;
  if (has_locationto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationto().data(), this->locationto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->locationto(), target);
  }

  // required string deviceID = 5;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deviceid(), target);
  }

  // required int32 UMID = 6;
  if (has_umid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->umid(), target);
  }

  // required int32 requestType = 7;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->requesttype(), target);
  }

  // required string comments = 8;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->comments(), target);
  }

  // optional string phoneNumer = 9 [default = ""];
  if (has_phonenumer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenumer().data(), this->phonenumer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->phonenumer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmissionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string firstName = 1;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // required string lastName = 2;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // required string locationFrom = 3;
    if (has_locationfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locationfrom());
    }

    // required string locationTo = 4;
    if (has_locationto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locationto());
    }

    // required string deviceID = 5;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // required int32 UMID = 6;
    if (has_umid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->umid());
    }

    // required int32 requestType = 7;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // required string comments = 8;
    if (has_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comments());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string phoneNumer = 9 [default = ""];
    if (has_phonenumer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmissionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmissionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmissionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmissionData::MergeFrom(const SubmissionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_locationfrom()) {
      set_locationfrom(from.locationfrom());
    }
    if (from.has_locationto()) {
      set_locationto(from.locationto());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_umid()) {
      set_umid(from.umid());
    }
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_comments()) {
      set_comments(from.comments());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phonenumer()) {
      set_phonenumer(from.phonenumer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmissionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmissionData::CopyFrom(const SubmissionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmissionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void SubmissionData::Swap(SubmissionData* other) {
  if (other != this) {
    std::swap(firstname_, other->firstname_);
    std::swap(lastname_, other->lastname_);
    std::swap(locationfrom_, other->locationfrom_);
    std::swap(locationto_, other->locationto_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(umid_, other->umid_);
    std::swap(requesttype_, other->requesttype_);
    std::swap(comments_, other->comments_);
    std::swap(phonenumer_, other->phonenumer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmissionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmissionData_descriptor_;
  metadata.reflection = SubmissionData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
