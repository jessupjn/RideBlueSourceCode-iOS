// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RideBlueUserSubmissionData.proto

#ifndef PROTOBUF_RideBlueUserSubmissionData_2eproto__INCLUDED
#define PROTOBUF_RideBlueUserSubmissionData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RideBlueUserSubmissionData_2eproto();
void protobuf_AssignDesc_RideBlueUserSubmissionData_2eproto();
void protobuf_ShutdownFile_RideBlueUserSubmissionData_2eproto();

class SubmissionData;

// ===================================================================

class SubmissionData : public ::google::protobuf::Message {
 public:
  SubmissionData();
  virtual ~SubmissionData();

  SubmissionData(const SubmissionData& from);

  inline SubmissionData& operator=(const SubmissionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmissionData& default_instance();

  void Swap(SubmissionData* other);

  // implements Message ----------------------------------------------

  SubmissionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubmissionData& from);
  void MergeFrom(const SubmissionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string firstName = 1;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstNameFieldNumber = 1;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  inline void set_allocated_firstname(::std::string* firstname);

  // required string lastName = 2;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastNameFieldNumber = 2;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  inline void set_allocated_lastname(::std::string* lastname);

  // required string locationFrom = 3;
  inline bool has_locationfrom() const;
  inline void clear_locationfrom();
  static const int kLocationFromFieldNumber = 3;
  inline const ::std::string& locationfrom() const;
  inline void set_locationfrom(const ::std::string& value);
  inline void set_locationfrom(const char* value);
  inline void set_locationfrom(const char* value, size_t size);
  inline ::std::string* mutable_locationfrom();
  inline ::std::string* release_locationfrom();
  inline void set_allocated_locationfrom(::std::string* locationfrom);

  // required string locationTo = 4;
  inline bool has_locationto() const;
  inline void clear_locationto();
  static const int kLocationToFieldNumber = 4;
  inline const ::std::string& locationto() const;
  inline void set_locationto(const ::std::string& value);
  inline void set_locationto(const char* value);
  inline void set_locationto(const char* value, size_t size);
  inline ::std::string* mutable_locationto();
  inline ::std::string* release_locationto();
  inline void set_allocated_locationto(::std::string* locationto);

  // required string deviceID = 5;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 5;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // required int32 UMID = 6;
  inline bool has_umid() const;
  inline void clear_umid();
  static const int kUMIDFieldNumber = 6;
  inline ::google::protobuf::int32 umid() const;
  inline void set_umid(::google::protobuf::int32 value);

  // required int32 requestType = 7;
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 7;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // required string comments = 8;
  inline bool has_comments() const;
  inline void clear_comments();
  static const int kCommentsFieldNumber = 8;
  inline const ::std::string& comments() const;
  inline void set_comments(const ::std::string& value);
  inline void set_comments(const char* value);
  inline void set_comments(const char* value, size_t size);
  inline ::std::string* mutable_comments();
  inline ::std::string* release_comments();
  inline void set_allocated_comments(::std::string* comments);

  // optional string phoneNumer = 9 [default = ""];
  inline bool has_phonenumer() const;
  inline void clear_phonenumer();
  static const int kPhoneNumerFieldNumber = 9;
  inline const ::std::string& phonenumer() const;
  inline void set_phonenumer(const ::std::string& value);
  inline void set_phonenumer(const char* value);
  inline void set_phonenumer(const char* value, size_t size);
  inline ::std::string* mutable_phonenumer();
  inline ::std::string* release_phonenumer();
  inline void set_allocated_phonenumer(::std::string* phonenumer);

  // @@protoc_insertion_point(class_scope:SubmissionData)
 private:
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_lastname();
  inline void clear_has_lastname();
  inline void set_has_locationfrom();
  inline void clear_has_locationfrom();
  inline void set_has_locationto();
  inline void clear_has_locationto();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_umid();
  inline void clear_has_umid();
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_comments();
  inline void clear_has_comments();
  inline void set_has_phonenumer();
  inline void clear_has_phonenumer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* firstname_;
  ::std::string* lastname_;
  ::std::string* locationfrom_;
  ::std::string* locationto_;
  ::std::string* deviceid_;
  ::google::protobuf::int32 umid_;
  ::google::protobuf::int32 requesttype_;
  ::std::string* comments_;
  ::std::string* phonenumer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_RideBlueUserSubmissionData_2eproto();
  friend void protobuf_AssignDesc_RideBlueUserSubmissionData_2eproto();
  friend void protobuf_ShutdownFile_RideBlueUserSubmissionData_2eproto();

  void InitAsDefaultInstance();
  static SubmissionData* default_instance_;
};
// ===================================================================


// ===================================================================

// SubmissionData

// required string firstName = 1;
inline bool SubmissionData::has_firstname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubmissionData::set_has_firstname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubmissionData::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubmissionData::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& SubmissionData::firstname() const {
  return *firstname_;
}
inline void SubmissionData::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void SubmissionData::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void SubmissionData::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmissionData::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  return firstname_;
}
inline ::std::string* SubmissionData::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubmissionData::set_allocated_firstname(::std::string* firstname) {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (firstname) {
    set_has_firstname();
    firstname_ = firstname;
  } else {
    clear_has_firstname();
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string lastName = 2;
inline bool SubmissionData::has_lastname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubmissionData::set_has_lastname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubmissionData::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubmissionData::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    lastname_->clear();
  }
  clear_has_lastname();
}
inline const ::std::string& SubmissionData::lastname() const {
  return *lastname_;
}
inline void SubmissionData::set_lastname(const ::std::string& value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void SubmissionData::set_lastname(const char* value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void SubmissionData::set_lastname(const char* value, size_t size) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmissionData::mutable_lastname() {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  return lastname_;
}
inline ::std::string* SubmissionData::release_lastname() {
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubmissionData::set_allocated_lastname(::std::string* lastname) {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (lastname) {
    set_has_lastname();
    lastname_ = lastname;
  } else {
    clear_has_lastname();
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string locationFrom = 3;
inline bool SubmissionData::has_locationfrom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubmissionData::set_has_locationfrom() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubmissionData::clear_has_locationfrom() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubmissionData::clear_locationfrom() {
  if (locationfrom_ != &::google::protobuf::internal::kEmptyString) {
    locationfrom_->clear();
  }
  clear_has_locationfrom();
}
inline const ::std::string& SubmissionData::locationfrom() const {
  return *locationfrom_;
}
inline void SubmissionData::set_locationfrom(const ::std::string& value) {
  set_has_locationfrom();
  if (locationfrom_ == &::google::protobuf::internal::kEmptyString) {
    locationfrom_ = new ::std::string;
  }
  locationfrom_->assign(value);
}
inline void SubmissionData::set_locationfrom(const char* value) {
  set_has_locationfrom();
  if (locationfrom_ == &::google::protobuf::internal::kEmptyString) {
    locationfrom_ = new ::std::string;
  }
  locationfrom_->assign(value);
}
inline void SubmissionData::set_locationfrom(const char* value, size_t size) {
  set_has_locationfrom();
  if (locationfrom_ == &::google::protobuf::internal::kEmptyString) {
    locationfrom_ = new ::std::string;
  }
  locationfrom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmissionData::mutable_locationfrom() {
  set_has_locationfrom();
  if (locationfrom_ == &::google::protobuf::internal::kEmptyString) {
    locationfrom_ = new ::std::string;
  }
  return locationfrom_;
}
inline ::std::string* SubmissionData::release_locationfrom() {
  clear_has_locationfrom();
  if (locationfrom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = locationfrom_;
    locationfrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubmissionData::set_allocated_locationfrom(::std::string* locationfrom) {
  if (locationfrom_ != &::google::protobuf::internal::kEmptyString) {
    delete locationfrom_;
  }
  if (locationfrom) {
    set_has_locationfrom();
    locationfrom_ = locationfrom;
  } else {
    clear_has_locationfrom();
    locationfrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string locationTo = 4;
inline bool SubmissionData::has_locationto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SubmissionData::set_has_locationto() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SubmissionData::clear_has_locationto() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SubmissionData::clear_locationto() {
  if (locationto_ != &::google::protobuf::internal::kEmptyString) {
    locationto_->clear();
  }
  clear_has_locationto();
}
inline const ::std::string& SubmissionData::locationto() const {
  return *locationto_;
}
inline void SubmissionData::set_locationto(const ::std::string& value) {
  set_has_locationto();
  if (locationto_ == &::google::protobuf::internal::kEmptyString) {
    locationto_ = new ::std::string;
  }
  locationto_->assign(value);
}
inline void SubmissionData::set_locationto(const char* value) {
  set_has_locationto();
  if (locationto_ == &::google::protobuf::internal::kEmptyString) {
    locationto_ = new ::std::string;
  }
  locationto_->assign(value);
}
inline void SubmissionData::set_locationto(const char* value, size_t size) {
  set_has_locationto();
  if (locationto_ == &::google::protobuf::internal::kEmptyString) {
    locationto_ = new ::std::string;
  }
  locationto_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmissionData::mutable_locationto() {
  set_has_locationto();
  if (locationto_ == &::google::protobuf::internal::kEmptyString) {
    locationto_ = new ::std::string;
  }
  return locationto_;
}
inline ::std::string* SubmissionData::release_locationto() {
  clear_has_locationto();
  if (locationto_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = locationto_;
    locationto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubmissionData::set_allocated_locationto(::std::string* locationto) {
  if (locationto_ != &::google::protobuf::internal::kEmptyString) {
    delete locationto_;
  }
  if (locationto) {
    set_has_locationto();
    locationto_ = locationto;
  } else {
    clear_has_locationto();
    locationto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string deviceID = 5;
inline bool SubmissionData::has_deviceid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SubmissionData::set_has_deviceid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SubmissionData::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SubmissionData::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& SubmissionData::deviceid() const {
  return *deviceid_;
}
inline void SubmissionData::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void SubmissionData::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void SubmissionData::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmissionData::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* SubmissionData::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubmissionData::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 UMID = 6;
inline bool SubmissionData::has_umid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SubmissionData::set_has_umid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SubmissionData::clear_has_umid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SubmissionData::clear_umid() {
  umid_ = 0;
  clear_has_umid();
}
inline ::google::protobuf::int32 SubmissionData::umid() const {
  return umid_;
}
inline void SubmissionData::set_umid(::google::protobuf::int32 value) {
  set_has_umid();
  umid_ = value;
}

// required int32 requestType = 7;
inline bool SubmissionData::has_requesttype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SubmissionData::set_has_requesttype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SubmissionData::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SubmissionData::clear_requesttype() {
  requesttype_ = 0;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 SubmissionData::requesttype() const {
  return requesttype_;
}
inline void SubmissionData::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
}

// required string comments = 8;
inline bool SubmissionData::has_comments() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SubmissionData::set_has_comments() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SubmissionData::clear_has_comments() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SubmissionData::clear_comments() {
  if (comments_ != &::google::protobuf::internal::kEmptyString) {
    comments_->clear();
  }
  clear_has_comments();
}
inline const ::std::string& SubmissionData::comments() const {
  return *comments_;
}
inline void SubmissionData::set_comments(const ::std::string& value) {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::kEmptyString) {
    comments_ = new ::std::string;
  }
  comments_->assign(value);
}
inline void SubmissionData::set_comments(const char* value) {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::kEmptyString) {
    comments_ = new ::std::string;
  }
  comments_->assign(value);
}
inline void SubmissionData::set_comments(const char* value, size_t size) {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::kEmptyString) {
    comments_ = new ::std::string;
  }
  comments_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmissionData::mutable_comments() {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::kEmptyString) {
    comments_ = new ::std::string;
  }
  return comments_;
}
inline ::std::string* SubmissionData::release_comments() {
  clear_has_comments();
  if (comments_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comments_;
    comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubmissionData::set_allocated_comments(::std::string* comments) {
  if (comments_ != &::google::protobuf::internal::kEmptyString) {
    delete comments_;
  }
  if (comments) {
    set_has_comments();
    comments_ = comments;
  } else {
    clear_has_comments();
    comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phoneNumer = 9 [default = ""];
inline bool SubmissionData::has_phonenumer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SubmissionData::set_has_phonenumer() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SubmissionData::clear_has_phonenumer() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SubmissionData::clear_phonenumer() {
  if (phonenumer_ != &::google::protobuf::internal::kEmptyString) {
    phonenumer_->clear();
  }
  clear_has_phonenumer();
}
inline const ::std::string& SubmissionData::phonenumer() const {
  return *phonenumer_;
}
inline void SubmissionData::set_phonenumer(const ::std::string& value) {
  set_has_phonenumer();
  if (phonenumer_ == &::google::protobuf::internal::kEmptyString) {
    phonenumer_ = new ::std::string;
  }
  phonenumer_->assign(value);
}
inline void SubmissionData::set_phonenumer(const char* value) {
  set_has_phonenumer();
  if (phonenumer_ == &::google::protobuf::internal::kEmptyString) {
    phonenumer_ = new ::std::string;
  }
  phonenumer_->assign(value);
}
inline void SubmissionData::set_phonenumer(const char* value, size_t size) {
  set_has_phonenumer();
  if (phonenumer_ == &::google::protobuf::internal::kEmptyString) {
    phonenumer_ = new ::std::string;
  }
  phonenumer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmissionData::mutable_phonenumer() {
  set_has_phonenumer();
  if (phonenumer_ == &::google::protobuf::internal::kEmptyString) {
    phonenumer_ = new ::std::string;
  }
  return phonenumer_;
}
inline ::std::string* SubmissionData::release_phonenumer() {
  clear_has_phonenumer();
  if (phonenumer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phonenumer_;
    phonenumer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubmissionData::set_allocated_phonenumer(::std::string* phonenumer) {
  if (phonenumer_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenumer_;
  }
  if (phonenumer) {
    set_has_phonenumer();
    phonenumer_ = phonenumer;
  } else {
    clear_has_phonenumer();
    phonenumer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RideBlueUserSubmissionData_2eproto__INCLUDED
